paths:
  /users/changePassword:
    post:
      tags:
        - users
      summary: Cambio de password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/changePass"
      responses:
        204:
          description: se envio el email para el cambio de password
        404:
          description: el usuario a ser consultado no existe
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/userNotFound"
        500:
          description: error no identificado
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/unexpected"
  /users/:
    post:
      tags:
        - users
      summary: Creacion de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                lastname:
                  type: string
                phoneNumber:
                  type: integer
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
      responses:
        200:
          description: devuelve toda la información del user creado menos la password
          content:
            "application/json":
              schema:
                $ref: "#/definitions/user"
        404:
          description: el usuario a ser consultado no existe
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/userNotFound"
        500:
          description: error no identificado
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/unexpected"
    get:
      tags:
        - users
      summary: Obtiene todos los usuarios registrados de forma paginada
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: Una lista de objetos con el detalle los usuarios
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/definitions/user"
        404:
          description: el usuario a ser consultado no existe
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/userNotFound"
        500:
          description: error no identificado
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/unexpected"
  /users/{userId}:
    get:
      tags:
        - users
      summary: Obtiene un usuario registrado
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: id del user a obtener
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Un objeto con el detalle los usuarios
          content:
            "application/json":
              schema:
                $ref: "#/definitions/user"
        404:
          description: el usuario a ser consultado no existe
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/userNotFound"
        500:
          description: error no identificado
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/unexpected"
    patch:
        tags:
          - users
        summary: Actualiza un usuario
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: userId
            schema:
              type: integer
            required: true
            minimum: 1
            description: Es el ID asociado al usuario
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/definitions/postBody"
        responses:
          200:
            description: Edición exitosa
            content:
              "application/json":
                schema:
                  type: object
          404:
            description: el usuario a ser consultado no existe
            content:
              "application/json":
                schema:
                  $ref: "#/definitions/errors/userNotFound"
          500:
            description: error no identificado
            content:
              "application/json":
                schema:
                  $ref: "#/definitions/errors/unexpected"
  /users/{userId}/location:
    patch:
      tags:
        - users
      summary: Setea location default
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          minimum: 1
          description: Es el ID asociado al usuario
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                defaultAddress:
                  type: integer
      responses:
        200:
          description: Edición exitosa de locacion
          content:
            "application/json":
              schema:
                type: object
        404:
          description: el usuario a ser consultado no existe
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/userNotFound"
        500:
          description: error no identificado
          content:
            "application/json":
              schema:
                $ref: "#/definitions/errors/unexpected"
definitions:
  postBody:
    type: object
    properties:
      name:
        type: string
      lastname:
        type: string
      phoneNumber:
        type: integer
      email:
        type: string
        format: email
      password:
        type: string
  changePass:
    type: object
    propierties:
      email:
        type: string
        format: email
      newPassword:
        type: string
  user:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      lastname:
        type: string
      phoneNumber:
        type: integer
      email:
        type: string
        format: email

  driverPostBody:
    type: object
    properties:
      license:
        type: string
      model:
        type: string
      licensePlate:
        type: string

  driver:
    type: object
    properties:
      id:
        type: integer
      userId:
        type: integer
      license:
        type: string
      model:
        type: string
      licensePlate:
        type: string
  errors:
    userNotFound:
      type: object
      properties:
        message:
          type: string

    unexpected:
      type: object
      properties:
        message:
          type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
